import type {FourtuneInputFile} from "@fourtune-types/fourtune/v0"
import type {FileToAutogenerate} from "./InternalState.d.mts"
import path from "node:path"

function parents(filePath: string): string[] {
	const parents = path.dirname(filePath).split(path.sep)

	if (parents.length === 1 && parents[0] === ".") {
		return []
	}

	return parents
}

export function autogeneratedFilesToInputFiles(
	list: FileToAutogenerate[], dir: string
): FourtuneInputFile[] {
	dir = path.normalize(`${dir}/`)

	return list.filter(entry => {
		return entry.filePath.startsWith(dir)
	}).map(entry => {
		const relativePath = entry.filePath.slice(dir.length)

		return {
			parents: parents(relativePath),
			name: path.basename(entry.filePath),
			relativePath,
			// source means relative path (from project root)
			// to file
			source: path.join(
				"auto", dir, relativePath
			),
			synthetic: true
		}
	})
}
